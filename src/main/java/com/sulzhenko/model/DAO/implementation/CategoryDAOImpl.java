package com.sulzhenko.model.DAO.implementation;

import com.sulzhenko.model.Constants;

import com.sulzhenko.model.DAO.CategoryDAO;
import com.sulzhenko.model.DAO.DAOException;
import com.sulzhenko.model.entity.Category;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static com.sulzhenko.model.DAO.SQLQueries.CategoryQueries.*;

/**
 * Category DAO class for CRUD operations with database. Matches table 'category' in database.
 *
 * @author Artem Sulzhenko
 * @version 1.0
 */

public class CategoryDAOImpl implements CategoryDAO, Constants {
    /** An instance of datasource to provide connection to database */
    private final DataSource dataSource;
    private static final Logger logger = LogManager.getLogger(CategoryDAOImpl.class);
    public CategoryDAOImpl(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    /**
     * Gets instance of Category from database by some parameter
     * @param parameter - value of some field in database
     * @param querySQL - String representation for SQL query
     * @return Optional.ofNullable - category is null if there is no category
     * @throws DAOException is wrapper for SQLException
     */

    @Override
    public Optional<Category> get(Object parameter, String querySQL) throws DAOException {
        Category category = null;
        try (Connection con = dataSource.getConnection();
             PreparedStatement stmt = con.prepareStatement(querySQL)) {
            stmt.setObject(1, parameter);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                category = new Category(rs.getString(2), rs.getLong(1));
            }
        } catch (SQLException e){
            logger.fatal(e.getMessage());
            throw new DAOException(UNKNOWN_ERROR);
        }
        return Optional.ofNullable(category);
    }

    /**
     * Gets list of all categories from database
     * @return categories list
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public List<Category> getAll() throws DAOException {
        List<Category> list = new ArrayList<>();
        try (Connection con = dataSource.getConnection();
             PreparedStatement stmt = con.prepareStatement(GET_ALL_CATEGORIES)){
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                list.add(new Category(rs.getString(2), rs.getLong(1)));
            }
        } catch (SQLException e){
            logger.fatal(e);
            throw new DAOException(UNKNOWN_ERROR);
        }
        return list;
    }

    /**
     * Gets instance of Category from database by id
     * @param id - value of id field in database
     * @return Optional.ofNullable - category is null if there is no category
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public Optional<Category> getById(long id) {
        return get(id, GET_CATEGORY_BY_ID);
    }

    /**
     * Gets instance of Category from database by name
     * @param name - value of category_name field in database
     * @return Optional.ofNullable - category is null if there is no category
     * @throws DAOException is wrapper for SQLException
     */
    public Optional<Category> getByName(String name) {
        return get(name, GET_CATEGORY_BY_NAME);
    }

    /**
     * Gets list of Categories from database by some parameter
     * @param parameter - value of some field in database
     * @param querySQL - String representation for SQL query
     * @return List of Category entities
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public List<Category> getList(Object parameter, String querySQL) throws DAOException {
        List<Category> list = new ArrayList<>();
        try (Connection con = dataSource.getConnection();
             PreparedStatement stmt = con.prepareStatement(querySQL)){
            stmt.setObject(1, parameter);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                list.add(new Category(rs.getString(2), rs.getInt(1)));
            }
        } catch (SQLException e) {
            logger.fatal(e.getMessage());
            throw new DAOException(UNKNOWN_ERROR);
        }
        return list;
    }

    /**
     * Inserts new category to database
     * @param category - id will be generated by database. Name cannot be null
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public void save(Category category) throws DAOException{
        try (Connection con = dataSource.getConnection();
             PreparedStatement stmt = con.prepareStatement(ADD_CATEGORY)){
            stmt.setString(1, category.getName());
            stmt.executeUpdate();
        } catch (SQLException e) {
            logger.fatal(e.getMessage());
            throw new DAOException(UNKNOWN_ERROR);
        }
    }

    /**
     * Updates category
     * @param category contains Category entity to be updated
     * @param params should contain category name to be updated
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public void update(Category category, String[] params) throws DAOException{
        String oldName = category.getName();
        try(Connection con = dataSource.getConnection();
            PreparedStatement stmt = con.prepareStatement(UPDATE_CATEGORY)) {
            int k = 0;
            stmt.setString(++k, params[k-1]);
            stmt.setString(++k, oldName);
            stmt.executeUpdate();
        } catch (SQLException e){
            logger.fatal(e.getMessage());
            throw new DAOException(UNKNOWN_ERROR);
        }
    }

    /**
     * Deletes category record in database
     * @param category - Category entity
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public void delete(Category category) throws DAOException{
        try (Connection con = dataSource.getConnection();
             PreparedStatement stmt = con.prepareStatement(DELETE_CATEGORY)){
            stmt.setString(1, category.getName());
            stmt.executeUpdate();
        } catch (SQLException e) {
            logger.fatal(e.getMessage());
            throw new DAOException(UNKNOWN_ERROR);
        }
    }
}
